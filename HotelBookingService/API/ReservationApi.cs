using HotelBookingService.BLL;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace HotelBookingService.API
{
    public class ReservationApi
    {
        private readonly IReservationStepsGetter _stepsGetter;

        public ReservationApi(IReservationStepsGetter stepsGetter)
        {
            _stepsGetter = stepsGetter;
        }

        public async Task<ReservationChain> GetStepsForHotel(Guid guid)
        {
            var steps = await _stepsGetter.GetDataAsync(guid);
            var reservationChain = new ReservationChain();

            foreach(var step in steps)
            {
                reservationChain.AddStep(step);
            }

            return reservationChain;
        }

        public void SetDataForReservation(ReservationChain reservationChain)
        {
            for(int i = 0; i < reservationChain.Count; i++)
            {
                var properties = ((ReservationStepBase)reservationChain[i]).AskForData(out var stepName);
                Console.WriteLine("Provide data for step: " + stepName);

                var inputs = new List<string>();
                foreach (var property in properties)
                {
                    if(property.Contains("Guid"))
                    {
                        var value = Guid.NewGuid().ToString();
                        inputs.Add(value);
                        Console.WriteLine($"Value for property {property} was autogenerated: {value}");
                    }
                    else
                    {
                        Console.WriteLine($"Write value for {property} :");
                        inputs.Add(Console.ReadLine());
                    }
                }

                var json = CreateJson(properties, inputs);
                ((ReservationStepBase)reservationChain[i]).UpdateData(json);
            }

        }

        private string CreateJson(List<string> properties, List<string> inputs)
        {
            string result = "{" + Environment.NewLine;
            for(int i = 0; i < properties.Count; i++)
            {
                result += $"\"{properties[i]}\": \"{inputs[i]}\"";
                if(i < properties.Count - 1)
                {
                    result += "," + Environment.NewLine;
                }
            }
            return result + Environment.NewLine + "}";
        }
    }
}
